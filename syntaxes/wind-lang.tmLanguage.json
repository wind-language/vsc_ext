{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Wind",
	"patterns": [
		{
			"name": "comment.line.double-slash.wind",
			"match": "//.*$"
		},
		{
			"name": "comment.block.wind",
			"begin": "/\\*",
			"end": "\\*/"
		},
		{
			"name": "keyword.control.directive.wind",
			"match": "@(include|import|pure|extern|pub|type|linkflag)"
		},
		{
			"name": "keyword.other.namespace.wind",
			"match": "::"
		},
		{
			"name": "keyword.pure.flags.wind",
			"match": "(stack|abi|noabi|expr|logue|stchk)"
		},
		{
			"name": "keyword.control.wind",
			"match": "\\b(branch|loop|continue|break|try|finally|else|func|return|global|var)\\b"
		},
		{
			"name": "keyword.type.wind",
			"match": "\\b(byte|short|int|long|unsigned byte|s8|s16|s32|s64|u8|u16|u32|u64|bool|char)\\b"
		},
		{
			"name": "constant.language.wind",
			"match": "\\b(true|false|Null)\\b"
		},
		{
			"name": "keyword.operator.wind",
			"match": "\\b(sizeof<[^>]+>)\\b"
		},
		{
			"name": "keyword.operator.arithmetic.wind",
			"match": "\\+|\\-|\\*|\\/|\\%|\\+=|\\-=|\\*=|\\/=|\\%="
		},
		{
			"name": "keyword.operator.assignment.wind",
			"match": "="
		},
		{
			"name": "keyword.operator.comparison.wind",
			"match": "==|!=|<|>|<=|>="
		},
		{
			"name": "keyword.operator.logical.wind",
			"match": "\\&\\&|\\|\\||!"
		},
		{
			"name": "keyword.operator.bitwise.wind",
			"match": "\\&|\\||\\^|~|<<|>>"
		},
		
		{
			"name": "keyword.other.exception.wind",
			"match": "\\b(SUM_OF|SUB_OF|MUL_OF|DIV_OF|GUARD|BOUNDS)\\b"
		},
		{
			"name": "storage.type.function.wind",
			"match": "\\bfunc\\b"
		},
		{
			"name": "storage.type.variable.wind",
			"match": "\\b(var|global)\\b"
		},
		{
			"name": "storage.type.global.wind",
			"match": "\\bglobal\\b"
		},
		{
			"name": "string.quoted.double.wind",
			"begin": "\"",
			"end": "\"",
			"patterns": [
			{
				"name": "constant.character.escape.wind",
				"match": "\\\\."
			}
			]
		},
		{
			"name": "keyword.control.namespace.wind",
			"match": "\\b(namespace)\\b"
		},
		{
			"name": "entity.name.function.declaration.wind",
			"match": "\\bfunc\\s+([a-zA-Z_][a-zA-Z0-9_]*)"
		},
		{
			"name": "entity.name.function.call.wind",
			"match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\s*(?=\\()"
		},
		{
			"name": "entity.name.variable.declaration.wind",
			"match": "\\bvar\\s+([a-zA-Z_][a-zA-Z0-9_]*)"
		},
		{
			"name": "variable.other.reference.wind",
			"match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
		},
		{
			"name": "support.function.builtin.wind",
			"match": "\\b(guard)\\b"
		},
		{
			"name": "constant.numeric.wind",
			"match": "\\b[0-9]+(_[0-9]+)*\\b"
		},
		{
			"name": "keyword.other.cast.wind",
			"match": "\\b(as)\\b"
		},
		{
			"name": "meta.inline.assembly.wind",
			"begin": "\\basm\\s*\\{",
			"end": "\\}",
			"patterns": [
			{
				"name": "keyword.other.asm.wind",
				"match": "\\b(mov|add|sub|mul|div|jmp|cmp|call|ret|push|pop)\\b"
			}
			]
		}
	],
  	"repository": {},
	"scopeName": "source.wind"
}